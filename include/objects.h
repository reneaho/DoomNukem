/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   objects.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: raho <raho@student.hive.fi>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/10/27 12:41:20 by okinnune          #+#    #+#             */
/*   Updated: 2023/03/27 18:48:26 by raho             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef OBJECTS_H
# define OBJECTS_H

# include <inttypes.h>
# include "vectors.h"
# include "colliders.h"

struct	s_world;
struct	s_sdlcontext;

typedef struct s_material
{
	char			texturename[256];
	char			name[256];
	uint32_t		kd;
	struct s_img	*img;
}	t_material;

typedef struct s_mat_parse
{
	t_material	mat;
	char		mat_path[256];
	char		*line;
	int			fd;
	int			ret;
}	t_mat_parse;

//Indexer for constructing faces (triangles)
typedef struct s_face
{
	uint32_t	v_indices[3];
	uint32_t	uv_indices[3];
	uint32_t	material_index;
	t_material	*material;
}	t_face;

typedef struct s_face_list_parse
{
	char		*line;
	t_list		*list;
	t_face		face;
	t_material	*mat;
	int			mat_index;
	int			ret;
}	t_face_list_parse;

typedef struct s_deltavertex
{
	uint32_t	v_index;
	t_vector3	delta;
}	t_deltavertex;

typedef struct s_object_anim_frame
{
	t_deltavertex	*deltavertices;
	uint32_t		vertcount;
}	t_object_anim_frame;

typedef struct s_object_anim
{
	t_object_anim_frame	*frames;
	uint32_t			framecount;
	char				name[128];
}	t_object_anim;

//*materials: null terminated 'array' of materials
//*vertices: null terminated 'array' of vertices
//*faces: null terminated 'array' of faces
typedef struct s_object
{
	char				name[256];
	t_material			*materials;
	t_vector3			*vertices;
	t_face				*faces;
	t_vector2			*uvs;
	uint32_t			material_count;
	uint32_t			vertice_count;
	uint32_t			uv_count;
	uint32_t			face_count;
	t_object_anim		o_anim;
}	t_object;

typedef struct s_object_parse
{
	t_list	*materials;
	t_list	*vertices;
	t_list	*uvs;
	t_list	*faces;
}	t_object_parse;

typedef struct s_uv_parse
{
	char		*line;
	t_list		*list;
	t_vector2	uv;
	int			ret;
}	t_uv_parse;

typedef struct s_vertex_parse
{
	char		*line;
	t_list		*list;
	t_vector3	vec;
	int			ret;
}	t_vertex_parse;

t_object		objparse(char *file_name);
t_material		parse_mat(int fd, char *name);
void			parse_mtllib(t_list **list, char *file_name);
t_material		*default_mat(void);
void			parse_animframe(int fd, t_object_anim_frame *frame, \
								t_object *object);
void			parse_anim(char *anim_path, char *anim_name, t_object *object);
struct s_list	*get_uv_list(int fd);
struct s_list	*get_vertex_list(int fd);
t_list			*get_face_list(int fd, t_list *materials);
void			objects_init(struct s_sdlcontext *sdl);

//Should only be used for generated meshes,
//such as ones generated by t_wall or t_meshtri
void			free_object(t_object **object);
t_object		*get_object_by_name(struct s_sdlcontext sdl, char *name);
t_object		*object_plane(struct s_sdlcontext *sdl);
t_object		*object_tri(struct s_sdlcontext *sdl);
void			set_object_boundingbox(t_object *obj);

#endif